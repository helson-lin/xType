name: Build and Release Signed xType

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  PRODUCT_NAME: xType
  SCHEME_NAME: xType
  CONFIGURATION: Release

jobs:
  build-signed:
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    # Import certificates and provisioning profiles
    - name: Import Code Signing Certificate
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 && secrets.P12_PASSWORD }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
        
    - name: Install Provisioning Profile
      if: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      run: |
        echo "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Build and Sign App
      run: |
        xcodebuild archive \
          -scheme "$SCHEME_NAME" \
          -configuration $CONFIGURATION \
          -archivePath "build/$PRODUCT_NAME.xcarchive" \
          -destination "generic/platform=macOS" \
          CODE_SIGN_STYLE=Manual \
          DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}" \
          CODE_SIGN_IDENTITY="${{ secrets.CODE_SIGN_IDENTITY }}" \
          PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_NAME }}" \
          SKIP_INSTALL=NO
          
    - name: Export Signed App
      run: |
        # Create export options plist with signing info
        cat > scripts/ExportOptionsSigned.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>destination</key>
            <string>export</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.yourcompany.xtype</key>
                <string>${{ secrets.PROVISIONING_PROFILE_NAME }}</string>
            </dict>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
          -archivePath "build/$PRODUCT_NAME.xcarchive" \
          -exportPath "build/export" \
          -exportOptionsPlist "scripts/ExportOptionsSigned.plist"
          
    - name: Notarize App (Optional)
      if: ${{ secrets.NOTARIZATION_USERNAME && secrets.NOTARIZATION_PASSWORD }}
      run: |
        # Create a zip file for notarization
        cd build/export
        zip -r "../$PRODUCT_NAME-for-notarization.zip" "$PRODUCT_NAME.app"
        cd ../..
        
        # Submit for notarization
        xcrun notarytool submit "build/$PRODUCT_NAME-for-notarization.zip" \
          --apple-id "${{ secrets.NOTARIZATION_USERNAME }}" \
          --password "${{ secrets.NOTARIZATION_PASSWORD }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --wait
          
        # Staple the notarization ticket
        xcrun stapler staple "build/export/$PRODUCT_NAME.app"
        
    - name: Create Signed DMG
      run: |
        chmod +x scripts/create_dmg.sh
        ./scripts/create_dmg.sh
        
    - name: Sign DMG (Optional)
      if: ${{ secrets.CODE_SIGN_IDENTITY }}
      run: |
        codesign --sign "${{ secrets.CODE_SIGN_IDENTITY }}" \
          --timestamp \
          --options runtime \
          "build/${PRODUCT_NAME}-"*.dmg
          
    - name: Verify Signature
      if: ${{ secrets.CODE_SIGN_IDENTITY }}
      run: |
        codesign --verify --verbose "build/${PRODUCT_NAME}-"*.dmg
        spctl --assess --type install "build/${PRODUCT_NAME}-"*.dmg
        
    - name: Upload Signed DMG
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PRODUCT_NAME }}-Signed-${{ github.sha }}
        path: build/*.dmg
        retention-days: 30
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: build/*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
        name: "xType ${{ github.ref_name }}"
        body: |
          ## What's New in xType ${{ github.ref_name }}
          
          ðŸŽ‰ **New Release Available!**
          
          ### Features
          - Modern file type management interface
          - Batch operations for setting default applications
          - Multi-language support (English/ä¸­æ–‡ç®€ä½“)
          - Intuitive and user-friendly design
          
          ### Installation
          1. Download the DMG file below
          2. Open the DMG and drag xType to Applications
          3. Launch from Applications folder
          4. Grant necessary permissions when prompted
          
          ### System Requirements
          - macOS 12.0 or later
          - Apple Silicon or Intel Mac
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.before }}...${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
